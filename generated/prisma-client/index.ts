// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  client: (where?: ClientWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  workBreakdown: (where?: WorkBreakdownWhereInput) => Promise<boolean>;
  workOrder: (where?: WorkOrderWhereInput) => Promise<boolean>;
  workType: (where?: WorkTypeWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  client: (where: ClientWhereUniqueInput) => ClientNullablePromise;
  clients: (args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Client>;
  clientsConnection: (args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClientConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  workBreakdown: (
    where: WorkBreakdownWhereUniqueInput
  ) => WorkBreakdownNullablePromise;
  workBreakdowns: (args?: {
    where?: WorkBreakdownWhereInput;
    orderBy?: WorkBreakdownOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WorkBreakdown>;
  workBreakdownsConnection: (args?: {
    where?: WorkBreakdownWhereInput;
    orderBy?: WorkBreakdownOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WorkBreakdownConnectionPromise;
  workOrder: (where: WorkOrderWhereUniqueInput) => WorkOrderNullablePromise;
  workOrders: (args?: {
    where?: WorkOrderWhereInput;
    orderBy?: WorkOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WorkOrder>;
  workOrdersConnection: (args?: {
    where?: WorkOrderWhereInput;
    orderBy?: WorkOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WorkOrderConnectionPromise;
  workType: (where: WorkTypeWhereUniqueInput) => WorkTypeNullablePromise;
  workTypes: (args?: {
    where?: WorkTypeWhereInput;
    orderBy?: WorkTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WorkType>;
  workTypesConnection: (args?: {
    where?: WorkTypeWhereInput;
    orderBy?: WorkTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WorkTypeConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createClient: (data: ClientCreateInput) => ClientPromise;
  updateClient: (args: {
    data: ClientUpdateInput;
    where: ClientWhereUniqueInput;
  }) => ClientPromise;
  updateManyClients: (args: {
    data: ClientUpdateManyMutationInput;
    where?: ClientWhereInput;
  }) => BatchPayloadPromise;
  upsertClient: (args: {
    where: ClientWhereUniqueInput;
    create: ClientCreateInput;
    update: ClientUpdateInput;
  }) => ClientPromise;
  deleteClient: (where: ClientWhereUniqueInput) => ClientPromise;
  deleteManyClients: (where?: ClientWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWorkBreakdown: (data: WorkBreakdownCreateInput) => WorkBreakdownPromise;
  updateWorkBreakdown: (args: {
    data: WorkBreakdownUpdateInput;
    where: WorkBreakdownWhereUniqueInput;
  }) => WorkBreakdownPromise;
  updateManyWorkBreakdowns: (args: {
    data: WorkBreakdownUpdateManyMutationInput;
    where?: WorkBreakdownWhereInput;
  }) => BatchPayloadPromise;
  upsertWorkBreakdown: (args: {
    where: WorkBreakdownWhereUniqueInput;
    create: WorkBreakdownCreateInput;
    update: WorkBreakdownUpdateInput;
  }) => WorkBreakdownPromise;
  deleteWorkBreakdown: (
    where: WorkBreakdownWhereUniqueInput
  ) => WorkBreakdownPromise;
  deleteManyWorkBreakdowns: (
    where?: WorkBreakdownWhereInput
  ) => BatchPayloadPromise;
  createWorkOrder: (data: WorkOrderCreateInput) => WorkOrderPromise;
  updateWorkOrder: (args: {
    data: WorkOrderUpdateInput;
    where: WorkOrderWhereUniqueInput;
  }) => WorkOrderPromise;
  updateManyWorkOrders: (args: {
    data: WorkOrderUpdateManyMutationInput;
    where?: WorkOrderWhereInput;
  }) => BatchPayloadPromise;
  upsertWorkOrder: (args: {
    where: WorkOrderWhereUniqueInput;
    create: WorkOrderCreateInput;
    update: WorkOrderUpdateInput;
  }) => WorkOrderPromise;
  deleteWorkOrder: (where: WorkOrderWhereUniqueInput) => WorkOrderPromise;
  deleteManyWorkOrders: (where?: WorkOrderWhereInput) => BatchPayloadPromise;
  createWorkType: (data: WorkTypeCreateInput) => WorkTypePromise;
  updateWorkType: (args: {
    data: WorkTypeUpdateInput;
    where: WorkTypeWhereUniqueInput;
  }) => WorkTypePromise;
  updateManyWorkTypes: (args: {
    data: WorkTypeUpdateManyMutationInput;
    where?: WorkTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertWorkType: (args: {
    where: WorkTypeWhereUniqueInput;
    create: WorkTypeCreateInput;
    update: WorkTypeUpdateInput;
  }) => WorkTypePromise;
  deleteWorkType: (where: WorkTypeWhereUniqueInput) => WorkTypePromise;
  deleteManyWorkTypes: (where?: WorkTypeWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  client: (
    where?: ClientSubscriptionWhereInput
  ) => ClientSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  workBreakdown: (
    where?: WorkBreakdownSubscriptionWhereInput
  ) => WorkBreakdownSubscriptionPayloadSubscription;
  workOrder: (
    where?: WorkOrderSubscriptionWhereInput
  ) => WorkOrderSubscriptionPayloadSubscription;
  workType: (
    where?: WorkTypeSubscriptionWhereInput
  ) => WorkTypeSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type WorkBreakdownStatus =
  | "PENDING"
  | "IN_PROGRESS"
  | "HALF_DONE"
  | "COMPLETE";

export type Role = "USER" | "ADMIN";

export type WorkOrderStatus =
  | "PENDING"
  | "IN_PROGRESS"
  | "HALF_DONE"
  | "COMPLETE";

export type WorkOrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "item_ASC"
  | "item_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WorkTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "rate_ASC"
  | "rate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WorkBreakdownOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sideA_ASC"
  | "sideA_DESC"
  | "sideB_ASC"
  | "sideB_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "side_ASC"
  | "side_DESC"
  | "rate_ASC"
  | "rate_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ClientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "contact_ASC"
  | "contact_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "dob_ASC"
  | "dob_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ClientWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface WorkOrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  item?: Maybe<String>;
  item_not?: Maybe<String>;
  item_in?: Maybe<String[] | String>;
  item_not_in?: Maybe<String[] | String>;
  item_lt?: Maybe<String>;
  item_lte?: Maybe<String>;
  item_gt?: Maybe<String>;
  item_gte?: Maybe<String>;
  item_contains?: Maybe<String>;
  item_not_contains?: Maybe<String>;
  item_starts_with?: Maybe<String>;
  item_not_starts_with?: Maybe<String>;
  item_ends_with?: Maybe<String>;
  item_not_ends_with?: Maybe<String>;
  workTypes_every?: Maybe<WorkTypeWhereInput>;
  workTypes_some?: Maybe<WorkTypeWhereInput>;
  workTypes_none?: Maybe<WorkTypeWhereInput>;
  WorkBreakdowns_every?: Maybe<WorkBreakdownWhereInput>;
  WorkBreakdowns_some?: Maybe<WorkBreakdownWhereInput>;
  WorkBreakdowns_none?: Maybe<WorkBreakdownWhereInput>;
  worker?: Maybe<UserWhereInput>;
  client?: Maybe<ClientWhereInput>;
  status?: Maybe<WorkOrderStatus>;
  status_not?: Maybe<WorkOrderStatus>;
  status_in?: Maybe<WorkOrderStatus[] | WorkOrderStatus>;
  status_not_in?: Maybe<WorkOrderStatus[] | WorkOrderStatus>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WorkOrderWhereInput[] | WorkOrderWhereInput>;
  OR?: Maybe<WorkOrderWhereInput[] | WorkOrderWhereInput>;
  NOT?: Maybe<WorkOrderWhereInput[] | WorkOrderWhereInput>;
}

export interface WorkTypeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  rate?: Maybe<Float>;
  rate_not?: Maybe<Float>;
  rate_in?: Maybe<Float[] | Float>;
  rate_not_in?: Maybe<Float[] | Float>;
  rate_lt?: Maybe<Float>;
  rate_lte?: Maybe<Float>;
  rate_gt?: Maybe<Float>;
  rate_gte?: Maybe<Float>;
  workOrders_every?: Maybe<WorkOrderWhereInput>;
  workOrders_some?: Maybe<WorkOrderWhereInput>;
  workOrders_none?: Maybe<WorkOrderWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WorkTypeWhereInput[] | WorkTypeWhereInput>;
  OR?: Maybe<WorkTypeWhereInput[] | WorkTypeWhereInput>;
  NOT?: Maybe<WorkTypeWhereInput[] | WorkTypeWhereInput>;
}

export interface WorkBreakdownWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  workOrder?: Maybe<WorkOrderWhereInput>;
  sideA?: Maybe<String>;
  sideA_not?: Maybe<String>;
  sideA_in?: Maybe<String[] | String>;
  sideA_not_in?: Maybe<String[] | String>;
  sideA_lt?: Maybe<String>;
  sideA_lte?: Maybe<String>;
  sideA_gt?: Maybe<String>;
  sideA_gte?: Maybe<String>;
  sideA_contains?: Maybe<String>;
  sideA_not_contains?: Maybe<String>;
  sideA_starts_with?: Maybe<String>;
  sideA_not_starts_with?: Maybe<String>;
  sideA_ends_with?: Maybe<String>;
  sideA_not_ends_with?: Maybe<String>;
  sideB?: Maybe<String>;
  sideB_not?: Maybe<String>;
  sideB_in?: Maybe<String[] | String>;
  sideB_not_in?: Maybe<String[] | String>;
  sideB_lt?: Maybe<String>;
  sideB_lte?: Maybe<String>;
  sideB_gt?: Maybe<String>;
  sideB_gte?: Maybe<String>;
  sideB_contains?: Maybe<String>;
  sideB_not_contains?: Maybe<String>;
  sideB_starts_with?: Maybe<String>;
  sideB_not_starts_with?: Maybe<String>;
  sideB_ends_with?: Maybe<String>;
  sideB_not_ends_with?: Maybe<String>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  side?: Maybe<Int>;
  side_not?: Maybe<Int>;
  side_in?: Maybe<Int[] | Int>;
  side_not_in?: Maybe<Int[] | Int>;
  side_lt?: Maybe<Int>;
  side_lte?: Maybe<Int>;
  side_gt?: Maybe<Int>;
  side_gte?: Maybe<Int>;
  rate?: Maybe<Float>;
  rate_not?: Maybe<Float>;
  rate_in?: Maybe<Float[] | Float>;
  rate_not_in?: Maybe<Float[] | Float>;
  rate_lt?: Maybe<Float>;
  rate_lte?: Maybe<Float>;
  rate_gt?: Maybe<Float>;
  rate_gte?: Maybe<Float>;
  status?: Maybe<WorkBreakdownStatus>;
  status_not?: Maybe<WorkBreakdownStatus>;
  status_in?: Maybe<WorkBreakdownStatus[] | WorkBreakdownStatus>;
  status_not_in?: Maybe<WorkBreakdownStatus[] | WorkBreakdownStatus>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WorkBreakdownWhereInput[] | WorkBreakdownWhereInput>;
  OR?: Maybe<WorkBreakdownWhereInput[] | WorkBreakdownWhereInput>;
  NOT?: Maybe<WorkBreakdownWhereInput[] | WorkBreakdownWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  dob_not?: Maybe<DateTimeInput>;
  dob_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_lt?: Maybe<DateTimeInput>;
  dob_lte?: Maybe<DateTimeInput>;
  dob_gt?: Maybe<DateTimeInput>;
  dob_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ClientWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  contact?: Maybe<String>;
  contact_not?: Maybe<String>;
  contact_in?: Maybe<String[] | String>;
  contact_not_in?: Maybe<String[] | String>;
  contact_lt?: Maybe<String>;
  contact_lte?: Maybe<String>;
  contact_gt?: Maybe<String>;
  contact_gte?: Maybe<String>;
  contact_contains?: Maybe<String>;
  contact_not_contains?: Maybe<String>;
  contact_starts_with?: Maybe<String>;
  contact_not_starts_with?: Maybe<String>;
  contact_ends_with?: Maybe<String>;
  contact_not_ends_with?: Maybe<String>;
  workOrders_every?: Maybe<WorkOrderWhereInput>;
  workOrders_some?: Maybe<WorkOrderWhereInput>;
  workOrders_none?: Maybe<WorkOrderWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ClientWhereInput[] | ClientWhereInput>;
  OR?: Maybe<ClientWhereInput[] | ClientWhereInput>;
  NOT?: Maybe<ClientWhereInput[] | ClientWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type WorkBreakdownWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type WorkOrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type WorkTypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface ClientCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  contact?: Maybe<String>;
  workOrders?: Maybe<WorkOrderCreateManyWithoutClientInput>;
}

export interface WorkOrderCreateManyWithoutClientInput {
  create?: Maybe<
    WorkOrderCreateWithoutClientInput[] | WorkOrderCreateWithoutClientInput
  >;
  connect?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
}

export interface WorkOrderCreateWithoutClientInput {
  id?: Maybe<ID_Input>;
  item: String;
  workTypes?: Maybe<WorkTypeCreateManyWithoutWorkOrdersInput>;
  WorkBreakdowns?: Maybe<WorkBreakdownCreateManyWithoutWorkOrderInput>;
  worker?: Maybe<UserCreateOneInput>;
  status?: Maybe<WorkOrderStatus>;
}

export interface WorkTypeCreateManyWithoutWorkOrdersInput {
  create?: Maybe<
    | WorkTypeCreateWithoutWorkOrdersInput[]
    | WorkTypeCreateWithoutWorkOrdersInput
  >;
  connect?: Maybe<WorkTypeWhereUniqueInput[] | WorkTypeWhereUniqueInput>;
}

export interface WorkTypeCreateWithoutWorkOrdersInput {
  id?: Maybe<ID_Input>;
  name: String;
  rate: Float;
}

export interface WorkBreakdownCreateManyWithoutWorkOrderInput {
  create?: Maybe<
    | WorkBreakdownCreateWithoutWorkOrderInput[]
    | WorkBreakdownCreateWithoutWorkOrderInput
  >;
  connect?: Maybe<
    WorkBreakdownWhereUniqueInput[] | WorkBreakdownWhereUniqueInput
  >;
}

export interface WorkBreakdownCreateWithoutWorkOrderInput {
  id?: Maybe<ID_Input>;
  sideA?: Maybe<String>;
  sideB?: Maybe<String>;
  quantity?: Maybe<Int>;
  side?: Maybe<Int>;
  rate?: Maybe<Float>;
  status?: Maybe<WorkBreakdownStatus>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  email: String;
  password: String;
  role?: Maybe<Role>;
}

export interface ClientUpdateInput {
  name?: Maybe<String>;
  contact?: Maybe<String>;
  workOrders?: Maybe<WorkOrderUpdateManyWithoutClientInput>;
}

export interface WorkOrderUpdateManyWithoutClientInput {
  create?: Maybe<
    WorkOrderCreateWithoutClientInput[] | WorkOrderCreateWithoutClientInput
  >;
  delete?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
  connect?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
  set?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
  disconnect?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
  update?: Maybe<
    | WorkOrderUpdateWithWhereUniqueWithoutClientInput[]
    | WorkOrderUpdateWithWhereUniqueWithoutClientInput
  >;
  upsert?: Maybe<
    | WorkOrderUpsertWithWhereUniqueWithoutClientInput[]
    | WorkOrderUpsertWithWhereUniqueWithoutClientInput
  >;
  deleteMany?: Maybe<WorkOrderScalarWhereInput[] | WorkOrderScalarWhereInput>;
  updateMany?: Maybe<
    | WorkOrderUpdateManyWithWhereNestedInput[]
    | WorkOrderUpdateManyWithWhereNestedInput
  >;
}

export interface WorkOrderUpdateWithWhereUniqueWithoutClientInput {
  where: WorkOrderWhereUniqueInput;
  data: WorkOrderUpdateWithoutClientDataInput;
}

export interface WorkOrderUpdateWithoutClientDataInput {
  item?: Maybe<String>;
  workTypes?: Maybe<WorkTypeUpdateManyWithoutWorkOrdersInput>;
  WorkBreakdowns?: Maybe<WorkBreakdownUpdateManyWithoutWorkOrderInput>;
  worker?: Maybe<UserUpdateOneInput>;
  status?: Maybe<WorkOrderStatus>;
}

export interface WorkTypeUpdateManyWithoutWorkOrdersInput {
  create?: Maybe<
    | WorkTypeCreateWithoutWorkOrdersInput[]
    | WorkTypeCreateWithoutWorkOrdersInput
  >;
  delete?: Maybe<WorkTypeWhereUniqueInput[] | WorkTypeWhereUniqueInput>;
  connect?: Maybe<WorkTypeWhereUniqueInput[] | WorkTypeWhereUniqueInput>;
  set?: Maybe<WorkTypeWhereUniqueInput[] | WorkTypeWhereUniqueInput>;
  disconnect?: Maybe<WorkTypeWhereUniqueInput[] | WorkTypeWhereUniqueInput>;
  update?: Maybe<
    | WorkTypeUpdateWithWhereUniqueWithoutWorkOrdersInput[]
    | WorkTypeUpdateWithWhereUniqueWithoutWorkOrdersInput
  >;
  upsert?: Maybe<
    | WorkTypeUpsertWithWhereUniqueWithoutWorkOrdersInput[]
    | WorkTypeUpsertWithWhereUniqueWithoutWorkOrdersInput
  >;
  deleteMany?: Maybe<WorkTypeScalarWhereInput[] | WorkTypeScalarWhereInput>;
  updateMany?: Maybe<
    | WorkTypeUpdateManyWithWhereNestedInput[]
    | WorkTypeUpdateManyWithWhereNestedInput
  >;
}

export interface WorkTypeUpdateWithWhereUniqueWithoutWorkOrdersInput {
  where: WorkTypeWhereUniqueInput;
  data: WorkTypeUpdateWithoutWorkOrdersDataInput;
}

export interface WorkTypeUpdateWithoutWorkOrdersDataInput {
  name?: Maybe<String>;
  rate?: Maybe<Float>;
}

export interface WorkTypeUpsertWithWhereUniqueWithoutWorkOrdersInput {
  where: WorkTypeWhereUniqueInput;
  update: WorkTypeUpdateWithoutWorkOrdersDataInput;
  create: WorkTypeCreateWithoutWorkOrdersInput;
}

export interface WorkTypeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  rate?: Maybe<Float>;
  rate_not?: Maybe<Float>;
  rate_in?: Maybe<Float[] | Float>;
  rate_not_in?: Maybe<Float[] | Float>;
  rate_lt?: Maybe<Float>;
  rate_lte?: Maybe<Float>;
  rate_gt?: Maybe<Float>;
  rate_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WorkTypeScalarWhereInput[] | WorkTypeScalarWhereInput>;
  OR?: Maybe<WorkTypeScalarWhereInput[] | WorkTypeScalarWhereInput>;
  NOT?: Maybe<WorkTypeScalarWhereInput[] | WorkTypeScalarWhereInput>;
}

export interface WorkTypeUpdateManyWithWhereNestedInput {
  where: WorkTypeScalarWhereInput;
  data: WorkTypeUpdateManyDataInput;
}

export interface WorkTypeUpdateManyDataInput {
  name?: Maybe<String>;
  rate?: Maybe<Float>;
}

export interface WorkBreakdownUpdateManyWithoutWorkOrderInput {
  create?: Maybe<
    | WorkBreakdownCreateWithoutWorkOrderInput[]
    | WorkBreakdownCreateWithoutWorkOrderInput
  >;
  delete?: Maybe<
    WorkBreakdownWhereUniqueInput[] | WorkBreakdownWhereUniqueInput
  >;
  connect?: Maybe<
    WorkBreakdownWhereUniqueInput[] | WorkBreakdownWhereUniqueInput
  >;
  set?: Maybe<WorkBreakdownWhereUniqueInput[] | WorkBreakdownWhereUniqueInput>;
  disconnect?: Maybe<
    WorkBreakdownWhereUniqueInput[] | WorkBreakdownWhereUniqueInput
  >;
  update?: Maybe<
    | WorkBreakdownUpdateWithWhereUniqueWithoutWorkOrderInput[]
    | WorkBreakdownUpdateWithWhereUniqueWithoutWorkOrderInput
  >;
  upsert?: Maybe<
    | WorkBreakdownUpsertWithWhereUniqueWithoutWorkOrderInput[]
    | WorkBreakdownUpsertWithWhereUniqueWithoutWorkOrderInput
  >;
  deleteMany?: Maybe<
    WorkBreakdownScalarWhereInput[] | WorkBreakdownScalarWhereInput
  >;
  updateMany?: Maybe<
    | WorkBreakdownUpdateManyWithWhereNestedInput[]
    | WorkBreakdownUpdateManyWithWhereNestedInput
  >;
}

export interface WorkBreakdownUpdateWithWhereUniqueWithoutWorkOrderInput {
  where: WorkBreakdownWhereUniqueInput;
  data: WorkBreakdownUpdateWithoutWorkOrderDataInput;
}

export interface WorkBreakdownUpdateWithoutWorkOrderDataInput {
  sideA?: Maybe<String>;
  sideB?: Maybe<String>;
  quantity?: Maybe<Int>;
  side?: Maybe<Int>;
  rate?: Maybe<Float>;
  status?: Maybe<WorkBreakdownStatus>;
}

export interface WorkBreakdownUpsertWithWhereUniqueWithoutWorkOrderInput {
  where: WorkBreakdownWhereUniqueInput;
  update: WorkBreakdownUpdateWithoutWorkOrderDataInput;
  create: WorkBreakdownCreateWithoutWorkOrderInput;
}

export interface WorkBreakdownScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sideA?: Maybe<String>;
  sideA_not?: Maybe<String>;
  sideA_in?: Maybe<String[] | String>;
  sideA_not_in?: Maybe<String[] | String>;
  sideA_lt?: Maybe<String>;
  sideA_lte?: Maybe<String>;
  sideA_gt?: Maybe<String>;
  sideA_gte?: Maybe<String>;
  sideA_contains?: Maybe<String>;
  sideA_not_contains?: Maybe<String>;
  sideA_starts_with?: Maybe<String>;
  sideA_not_starts_with?: Maybe<String>;
  sideA_ends_with?: Maybe<String>;
  sideA_not_ends_with?: Maybe<String>;
  sideB?: Maybe<String>;
  sideB_not?: Maybe<String>;
  sideB_in?: Maybe<String[] | String>;
  sideB_not_in?: Maybe<String[] | String>;
  sideB_lt?: Maybe<String>;
  sideB_lte?: Maybe<String>;
  sideB_gt?: Maybe<String>;
  sideB_gte?: Maybe<String>;
  sideB_contains?: Maybe<String>;
  sideB_not_contains?: Maybe<String>;
  sideB_starts_with?: Maybe<String>;
  sideB_not_starts_with?: Maybe<String>;
  sideB_ends_with?: Maybe<String>;
  sideB_not_ends_with?: Maybe<String>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  side?: Maybe<Int>;
  side_not?: Maybe<Int>;
  side_in?: Maybe<Int[] | Int>;
  side_not_in?: Maybe<Int[] | Int>;
  side_lt?: Maybe<Int>;
  side_lte?: Maybe<Int>;
  side_gt?: Maybe<Int>;
  side_gte?: Maybe<Int>;
  rate?: Maybe<Float>;
  rate_not?: Maybe<Float>;
  rate_in?: Maybe<Float[] | Float>;
  rate_not_in?: Maybe<Float[] | Float>;
  rate_lt?: Maybe<Float>;
  rate_lte?: Maybe<Float>;
  rate_gt?: Maybe<Float>;
  rate_gte?: Maybe<Float>;
  status?: Maybe<WorkBreakdownStatus>;
  status_not?: Maybe<WorkBreakdownStatus>;
  status_in?: Maybe<WorkBreakdownStatus[] | WorkBreakdownStatus>;
  status_not_in?: Maybe<WorkBreakdownStatus[] | WorkBreakdownStatus>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WorkBreakdownScalarWhereInput[] | WorkBreakdownScalarWhereInput>;
  OR?: Maybe<WorkBreakdownScalarWhereInput[] | WorkBreakdownScalarWhereInput>;
  NOT?: Maybe<WorkBreakdownScalarWhereInput[] | WorkBreakdownScalarWhereInput>;
}

export interface WorkBreakdownUpdateManyWithWhereNestedInput {
  where: WorkBreakdownScalarWhereInput;
  data: WorkBreakdownUpdateManyDataInput;
}

export interface WorkBreakdownUpdateManyDataInput {
  sideA?: Maybe<String>;
  sideB?: Maybe<String>;
  quantity?: Maybe<Int>;
  side?: Maybe<Int>;
  rate?: Maybe<Float>;
  status?: Maybe<WorkBreakdownStatus>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface WorkOrderUpsertWithWhereUniqueWithoutClientInput {
  where: WorkOrderWhereUniqueInput;
  update: WorkOrderUpdateWithoutClientDataInput;
  create: WorkOrderCreateWithoutClientInput;
}

export interface WorkOrderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  item?: Maybe<String>;
  item_not?: Maybe<String>;
  item_in?: Maybe<String[] | String>;
  item_not_in?: Maybe<String[] | String>;
  item_lt?: Maybe<String>;
  item_lte?: Maybe<String>;
  item_gt?: Maybe<String>;
  item_gte?: Maybe<String>;
  item_contains?: Maybe<String>;
  item_not_contains?: Maybe<String>;
  item_starts_with?: Maybe<String>;
  item_not_starts_with?: Maybe<String>;
  item_ends_with?: Maybe<String>;
  item_not_ends_with?: Maybe<String>;
  status?: Maybe<WorkOrderStatus>;
  status_not?: Maybe<WorkOrderStatus>;
  status_in?: Maybe<WorkOrderStatus[] | WorkOrderStatus>;
  status_not_in?: Maybe<WorkOrderStatus[] | WorkOrderStatus>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WorkOrderScalarWhereInput[] | WorkOrderScalarWhereInput>;
  OR?: Maybe<WorkOrderScalarWhereInput[] | WorkOrderScalarWhereInput>;
  NOT?: Maybe<WorkOrderScalarWhereInput[] | WorkOrderScalarWhereInput>;
}

export interface WorkOrderUpdateManyWithWhereNestedInput {
  where: WorkOrderScalarWhereInput;
  data: WorkOrderUpdateManyDataInput;
}

export interface WorkOrderUpdateManyDataInput {
  item?: Maybe<String>;
  status?: Maybe<WorkOrderStatus>;
}

export interface ClientUpdateManyMutationInput {
  name?: Maybe<String>;
  contact?: Maybe<String>;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface WorkBreakdownCreateInput {
  id?: Maybe<ID_Input>;
  workOrder: WorkOrderCreateOneWithoutWorkBreakdownsInput;
  sideA?: Maybe<String>;
  sideB?: Maybe<String>;
  quantity?: Maybe<Int>;
  side?: Maybe<Int>;
  rate?: Maybe<Float>;
  status?: Maybe<WorkBreakdownStatus>;
}

export interface WorkOrderCreateOneWithoutWorkBreakdownsInput {
  create?: Maybe<WorkOrderCreateWithoutWorkBreakdownsInput>;
  connect?: Maybe<WorkOrderWhereUniqueInput>;
}

export interface WorkOrderCreateWithoutWorkBreakdownsInput {
  id?: Maybe<ID_Input>;
  item: String;
  workTypes?: Maybe<WorkTypeCreateManyWithoutWorkOrdersInput>;
  worker?: Maybe<UserCreateOneInput>;
  client: ClientCreateOneWithoutWorkOrdersInput;
  status?: Maybe<WorkOrderStatus>;
}

export interface ClientCreateOneWithoutWorkOrdersInput {
  create?: Maybe<ClientCreateWithoutWorkOrdersInput>;
  connect?: Maybe<ClientWhereUniqueInput>;
}

export interface ClientCreateWithoutWorkOrdersInput {
  id?: Maybe<ID_Input>;
  name: String;
  contact?: Maybe<String>;
}

export interface WorkBreakdownUpdateInput {
  workOrder?: Maybe<WorkOrderUpdateOneRequiredWithoutWorkBreakdownsInput>;
  sideA?: Maybe<String>;
  sideB?: Maybe<String>;
  quantity?: Maybe<Int>;
  side?: Maybe<Int>;
  rate?: Maybe<Float>;
  status?: Maybe<WorkBreakdownStatus>;
}

export interface WorkOrderUpdateOneRequiredWithoutWorkBreakdownsInput {
  create?: Maybe<WorkOrderCreateWithoutWorkBreakdownsInput>;
  update?: Maybe<WorkOrderUpdateWithoutWorkBreakdownsDataInput>;
  upsert?: Maybe<WorkOrderUpsertWithoutWorkBreakdownsInput>;
  connect?: Maybe<WorkOrderWhereUniqueInput>;
}

export interface WorkOrderUpdateWithoutWorkBreakdownsDataInput {
  item?: Maybe<String>;
  workTypes?: Maybe<WorkTypeUpdateManyWithoutWorkOrdersInput>;
  worker?: Maybe<UserUpdateOneInput>;
  client?: Maybe<ClientUpdateOneRequiredWithoutWorkOrdersInput>;
  status?: Maybe<WorkOrderStatus>;
}

export interface ClientUpdateOneRequiredWithoutWorkOrdersInput {
  create?: Maybe<ClientCreateWithoutWorkOrdersInput>;
  update?: Maybe<ClientUpdateWithoutWorkOrdersDataInput>;
  upsert?: Maybe<ClientUpsertWithoutWorkOrdersInput>;
  connect?: Maybe<ClientWhereUniqueInput>;
}

export interface ClientUpdateWithoutWorkOrdersDataInput {
  name?: Maybe<String>;
  contact?: Maybe<String>;
}

export interface ClientUpsertWithoutWorkOrdersInput {
  update: ClientUpdateWithoutWorkOrdersDataInput;
  create: ClientCreateWithoutWorkOrdersInput;
}

export interface WorkOrderUpsertWithoutWorkBreakdownsInput {
  update: WorkOrderUpdateWithoutWorkBreakdownsDataInput;
  create: WorkOrderCreateWithoutWorkBreakdownsInput;
}

export interface WorkBreakdownUpdateManyMutationInput {
  sideA?: Maybe<String>;
  sideB?: Maybe<String>;
  quantity?: Maybe<Int>;
  side?: Maybe<Int>;
  rate?: Maybe<Float>;
  status?: Maybe<WorkBreakdownStatus>;
}

export interface WorkOrderCreateInput {
  id?: Maybe<ID_Input>;
  item: String;
  workTypes?: Maybe<WorkTypeCreateManyWithoutWorkOrdersInput>;
  WorkBreakdowns?: Maybe<WorkBreakdownCreateManyWithoutWorkOrderInput>;
  worker?: Maybe<UserCreateOneInput>;
  client: ClientCreateOneWithoutWorkOrdersInput;
  status?: Maybe<WorkOrderStatus>;
}

export interface WorkOrderUpdateInput {
  item?: Maybe<String>;
  workTypes?: Maybe<WorkTypeUpdateManyWithoutWorkOrdersInput>;
  WorkBreakdowns?: Maybe<WorkBreakdownUpdateManyWithoutWorkOrderInput>;
  worker?: Maybe<UserUpdateOneInput>;
  client?: Maybe<ClientUpdateOneRequiredWithoutWorkOrdersInput>;
  status?: Maybe<WorkOrderStatus>;
}

export interface WorkOrderUpdateManyMutationInput {
  item?: Maybe<String>;
  status?: Maybe<WorkOrderStatus>;
}

export interface WorkTypeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  rate: Float;
  workOrders?: Maybe<WorkOrderCreateManyWithoutWorkTypesInput>;
}

export interface WorkOrderCreateManyWithoutWorkTypesInput {
  create?: Maybe<
    | WorkOrderCreateWithoutWorkTypesInput[]
    | WorkOrderCreateWithoutWorkTypesInput
  >;
  connect?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
}

export interface WorkOrderCreateWithoutWorkTypesInput {
  id?: Maybe<ID_Input>;
  item: String;
  WorkBreakdowns?: Maybe<WorkBreakdownCreateManyWithoutWorkOrderInput>;
  worker?: Maybe<UserCreateOneInput>;
  client: ClientCreateOneWithoutWorkOrdersInput;
  status?: Maybe<WorkOrderStatus>;
}

export interface WorkTypeUpdateInput {
  name?: Maybe<String>;
  rate?: Maybe<Float>;
  workOrders?: Maybe<WorkOrderUpdateManyWithoutWorkTypesInput>;
}

export interface WorkOrderUpdateManyWithoutWorkTypesInput {
  create?: Maybe<
    | WorkOrderCreateWithoutWorkTypesInput[]
    | WorkOrderCreateWithoutWorkTypesInput
  >;
  delete?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
  connect?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
  set?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
  disconnect?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
  update?: Maybe<
    | WorkOrderUpdateWithWhereUniqueWithoutWorkTypesInput[]
    | WorkOrderUpdateWithWhereUniqueWithoutWorkTypesInput
  >;
  upsert?: Maybe<
    | WorkOrderUpsertWithWhereUniqueWithoutWorkTypesInput[]
    | WorkOrderUpsertWithWhereUniqueWithoutWorkTypesInput
  >;
  deleteMany?: Maybe<WorkOrderScalarWhereInput[] | WorkOrderScalarWhereInput>;
  updateMany?: Maybe<
    | WorkOrderUpdateManyWithWhereNestedInput[]
    | WorkOrderUpdateManyWithWhereNestedInput
  >;
}

export interface WorkOrderUpdateWithWhereUniqueWithoutWorkTypesInput {
  where: WorkOrderWhereUniqueInput;
  data: WorkOrderUpdateWithoutWorkTypesDataInput;
}

export interface WorkOrderUpdateWithoutWorkTypesDataInput {
  item?: Maybe<String>;
  WorkBreakdowns?: Maybe<WorkBreakdownUpdateManyWithoutWorkOrderInput>;
  worker?: Maybe<UserUpdateOneInput>;
  client?: Maybe<ClientUpdateOneRequiredWithoutWorkOrdersInput>;
  status?: Maybe<WorkOrderStatus>;
}

export interface WorkOrderUpsertWithWhereUniqueWithoutWorkTypesInput {
  where: WorkOrderWhereUniqueInput;
  update: WorkOrderUpdateWithoutWorkTypesDataInput;
  create: WorkOrderCreateWithoutWorkTypesInput;
}

export interface WorkTypeUpdateManyMutationInput {
  name?: Maybe<String>;
  rate?: Maybe<Float>;
}

export interface ClientSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClientWhereInput>;
  AND?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
  OR?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
  NOT?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface WorkBreakdownSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WorkBreakdownWhereInput>;
  AND?: Maybe<
    WorkBreakdownSubscriptionWhereInput[] | WorkBreakdownSubscriptionWhereInput
  >;
  OR?: Maybe<
    WorkBreakdownSubscriptionWhereInput[] | WorkBreakdownSubscriptionWhereInput
  >;
  NOT?: Maybe<
    WorkBreakdownSubscriptionWhereInput[] | WorkBreakdownSubscriptionWhereInput
  >;
}

export interface WorkOrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WorkOrderWhereInput>;
  AND?: Maybe<
    WorkOrderSubscriptionWhereInput[] | WorkOrderSubscriptionWhereInput
  >;
  OR?: Maybe<
    WorkOrderSubscriptionWhereInput[] | WorkOrderSubscriptionWhereInput
  >;
  NOT?: Maybe<
    WorkOrderSubscriptionWhereInput[] | WorkOrderSubscriptionWhereInput
  >;
}

export interface WorkTypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WorkTypeWhereInput>;
  AND?: Maybe<
    WorkTypeSubscriptionWhereInput[] | WorkTypeSubscriptionWhereInput
  >;
  OR?: Maybe<WorkTypeSubscriptionWhereInput[] | WorkTypeSubscriptionWhereInput>;
  NOT?: Maybe<
    WorkTypeSubscriptionWhereInput[] | WorkTypeSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Client {
  id: ID_Output;
  name: String;
  contact?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ClientPromise extends Promise<Client>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  contact: () => Promise<String>;
  workOrders: <T = FragmentableArray<WorkOrder>>(args?: {
    where?: WorkOrderWhereInput;
    orderBy?: WorkOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClientSubscription
  extends Promise<AsyncIterator<Client>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  contact: () => Promise<AsyncIterator<String>>;
  workOrders: <T = Promise<AsyncIterator<WorkOrderSubscription>>>(args?: {
    where?: WorkOrderWhereInput;
    orderBy?: WorkOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClientNullablePromise
  extends Promise<Client | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  contact: () => Promise<String>;
  workOrders: <T = FragmentableArray<WorkOrder>>(args?: {
    where?: WorkOrderWhereInput;
    orderBy?: WorkOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkOrder {
  id: ID_Output;
  item: String;
  status: WorkOrderStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WorkOrderPromise extends Promise<WorkOrder>, Fragmentable {
  id: () => Promise<ID_Output>;
  item: () => Promise<String>;
  workTypes: <T = FragmentableArray<WorkType>>(args?: {
    where?: WorkTypeWhereInput;
    orderBy?: WorkTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  WorkBreakdowns: <T = FragmentableArray<WorkBreakdown>>(args?: {
    where?: WorkBreakdownWhereInput;
    orderBy?: WorkBreakdownOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  worker: <T = UserPromise>() => T;
  client: <T = ClientPromise>() => T;
  status: () => Promise<WorkOrderStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkOrderSubscription
  extends Promise<AsyncIterator<WorkOrder>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  item: () => Promise<AsyncIterator<String>>;
  workTypes: <T = Promise<AsyncIterator<WorkTypeSubscription>>>(args?: {
    where?: WorkTypeWhereInput;
    orderBy?: WorkTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  WorkBreakdowns: <
    T = Promise<AsyncIterator<WorkBreakdownSubscription>>
  >(args?: {
    where?: WorkBreakdownWhereInput;
    orderBy?: WorkBreakdownOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  worker: <T = UserSubscription>() => T;
  client: <T = ClientSubscription>() => T;
  status: () => Promise<AsyncIterator<WorkOrderStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WorkOrderNullablePromise
  extends Promise<WorkOrder | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  item: () => Promise<String>;
  workTypes: <T = FragmentableArray<WorkType>>(args?: {
    where?: WorkTypeWhereInput;
    orderBy?: WorkTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  WorkBreakdowns: <T = FragmentableArray<WorkBreakdown>>(args?: {
    where?: WorkBreakdownWhereInput;
    orderBy?: WorkBreakdownOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  worker: <T = UserPromise>() => T;
  client: <T = ClientPromise>() => T;
  status: () => Promise<WorkOrderStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkType {
  id: ID_Output;
  name: String;
  rate: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WorkTypePromise extends Promise<WorkType>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  rate: () => Promise<Float>;
  workOrders: <T = FragmentableArray<WorkOrder>>(args?: {
    where?: WorkOrderWhereInput;
    orderBy?: WorkOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkTypeSubscription
  extends Promise<AsyncIterator<WorkType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  rate: () => Promise<AsyncIterator<Float>>;
  workOrders: <T = Promise<AsyncIterator<WorkOrderSubscription>>>(args?: {
    where?: WorkOrderWhereInput;
    orderBy?: WorkOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WorkTypeNullablePromise
  extends Promise<WorkType | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  rate: () => Promise<Float>;
  workOrders: <T = FragmentableArray<WorkOrder>>(args?: {
    where?: WorkOrderWhereInput;
    orderBy?: WorkOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkBreakdown {
  id: ID_Output;
  sideA?: String;
  sideB?: String;
  quantity?: Int;
  side?: Int;
  rate?: Float;
  status: WorkBreakdownStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WorkBreakdownPromise
  extends Promise<WorkBreakdown>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  workOrder: <T = WorkOrderPromise>() => T;
  sideA: () => Promise<String>;
  sideB: () => Promise<String>;
  quantity: () => Promise<Int>;
  side: () => Promise<Int>;
  rate: () => Promise<Float>;
  status: () => Promise<WorkBreakdownStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkBreakdownSubscription
  extends Promise<AsyncIterator<WorkBreakdown>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  workOrder: <T = WorkOrderSubscription>() => T;
  sideA: () => Promise<AsyncIterator<String>>;
  sideB: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  side: () => Promise<AsyncIterator<Int>>;
  rate: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<WorkBreakdownStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WorkBreakdownNullablePromise
  extends Promise<WorkBreakdown | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  workOrder: <T = WorkOrderPromise>() => T;
  sideA: () => Promise<String>;
  sideB: () => Promise<String>;
  quantity: () => Promise<Int>;
  side: () => Promise<Int>;
  rate: () => Promise<Float>;
  status: () => Promise<WorkBreakdownStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName?: String;
  dob?: DateTimeOutput;
  email: String;
  password: String;
  role?: Role;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClientConnection {
  pageInfo: PageInfo;
  edges: ClientEdge[];
}

export interface ClientConnectionPromise
  extends Promise<ClientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClientEdge>>() => T;
  aggregate: <T = AggregateClientPromise>() => T;
}

export interface ClientConnectionSubscription
  extends Promise<AsyncIterator<ClientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClientSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ClientEdge {
  node: Client;
  cursor: String;
}

export interface ClientEdgePromise extends Promise<ClientEdge>, Fragmentable {
  node: <T = ClientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClientEdgeSubscription
  extends Promise<AsyncIterator<ClientEdge>>,
    Fragmentable {
  node: <T = ClientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClient {
  count: Int;
}

export interface AggregateClientPromise
  extends Promise<AggregateClient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClientSubscription
  extends Promise<AsyncIterator<AggregateClient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WorkBreakdownConnection {
  pageInfo: PageInfo;
  edges: WorkBreakdownEdge[];
}

export interface WorkBreakdownConnectionPromise
  extends Promise<WorkBreakdownConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkBreakdownEdge>>() => T;
  aggregate: <T = AggregateWorkBreakdownPromise>() => T;
}

export interface WorkBreakdownConnectionSubscription
  extends Promise<AsyncIterator<WorkBreakdownConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkBreakdownEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkBreakdownSubscription>() => T;
}

export interface WorkBreakdownEdge {
  node: WorkBreakdown;
  cursor: String;
}

export interface WorkBreakdownEdgePromise
  extends Promise<WorkBreakdownEdge>,
    Fragmentable {
  node: <T = WorkBreakdownPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkBreakdownEdgeSubscription
  extends Promise<AsyncIterator<WorkBreakdownEdge>>,
    Fragmentable {
  node: <T = WorkBreakdownSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWorkBreakdown {
  count: Int;
}

export interface AggregateWorkBreakdownPromise
  extends Promise<AggregateWorkBreakdown>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkBreakdownSubscription
  extends Promise<AsyncIterator<AggregateWorkBreakdown>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WorkOrderConnection {
  pageInfo: PageInfo;
  edges: WorkOrderEdge[];
}

export interface WorkOrderConnectionPromise
  extends Promise<WorkOrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkOrderEdge>>() => T;
  aggregate: <T = AggregateWorkOrderPromise>() => T;
}

export interface WorkOrderConnectionSubscription
  extends Promise<AsyncIterator<WorkOrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkOrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkOrderSubscription>() => T;
}

export interface WorkOrderEdge {
  node: WorkOrder;
  cursor: String;
}

export interface WorkOrderEdgePromise
  extends Promise<WorkOrderEdge>,
    Fragmentable {
  node: <T = WorkOrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkOrderEdgeSubscription
  extends Promise<AsyncIterator<WorkOrderEdge>>,
    Fragmentable {
  node: <T = WorkOrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWorkOrder {
  count: Int;
}

export interface AggregateWorkOrderPromise
  extends Promise<AggregateWorkOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkOrderSubscription
  extends Promise<AsyncIterator<AggregateWorkOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WorkTypeConnection {
  pageInfo: PageInfo;
  edges: WorkTypeEdge[];
}

export interface WorkTypeConnectionPromise
  extends Promise<WorkTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkTypeEdge>>() => T;
  aggregate: <T = AggregateWorkTypePromise>() => T;
}

export interface WorkTypeConnectionSubscription
  extends Promise<AsyncIterator<WorkTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkTypeSubscription>() => T;
}

export interface WorkTypeEdge {
  node: WorkType;
  cursor: String;
}

export interface WorkTypeEdgePromise
  extends Promise<WorkTypeEdge>,
    Fragmentable {
  node: <T = WorkTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkTypeEdgeSubscription
  extends Promise<AsyncIterator<WorkTypeEdge>>,
    Fragmentable {
  node: <T = WorkTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWorkType {
  count: Int;
}

export interface AggregateWorkTypePromise
  extends Promise<AggregateWorkType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkTypeSubscription
  extends Promise<AsyncIterator<AggregateWorkType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ClientSubscriptionPayload {
  mutation: MutationType;
  node: Client;
  updatedFields: String[];
  previousValues: ClientPreviousValues;
}

export interface ClientSubscriptionPayloadPromise
  extends Promise<ClientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClientPreviousValuesPromise>() => T;
}

export interface ClientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClientPreviousValuesSubscription>() => T;
}

export interface ClientPreviousValues {
  id: ID_Output;
  name: String;
  contact?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ClientPreviousValuesPromise
  extends Promise<ClientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  contact: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClientPreviousValuesSubscription
  extends Promise<AsyncIterator<ClientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  contact: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName?: String;
  dob?: DateTimeOutput;
  email: String;
  password: String;
  role?: Role;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WorkBreakdownSubscriptionPayload {
  mutation: MutationType;
  node: WorkBreakdown;
  updatedFields: String[];
  previousValues: WorkBreakdownPreviousValues;
}

export interface WorkBreakdownSubscriptionPayloadPromise
  extends Promise<WorkBreakdownSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkBreakdownPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkBreakdownPreviousValuesPromise>() => T;
}

export interface WorkBreakdownSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkBreakdownSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkBreakdownSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkBreakdownPreviousValuesSubscription>() => T;
}

export interface WorkBreakdownPreviousValues {
  id: ID_Output;
  sideA?: String;
  sideB?: String;
  quantity?: Int;
  side?: Int;
  rate?: Float;
  status: WorkBreakdownStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WorkBreakdownPreviousValuesPromise
  extends Promise<WorkBreakdownPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sideA: () => Promise<String>;
  sideB: () => Promise<String>;
  quantity: () => Promise<Int>;
  side: () => Promise<Int>;
  rate: () => Promise<Float>;
  status: () => Promise<WorkBreakdownStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkBreakdownPreviousValuesSubscription
  extends Promise<AsyncIterator<WorkBreakdownPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sideA: () => Promise<AsyncIterator<String>>;
  sideB: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  side: () => Promise<AsyncIterator<Int>>;
  rate: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<WorkBreakdownStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WorkOrderSubscriptionPayload {
  mutation: MutationType;
  node: WorkOrder;
  updatedFields: String[];
  previousValues: WorkOrderPreviousValues;
}

export interface WorkOrderSubscriptionPayloadPromise
  extends Promise<WorkOrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkOrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkOrderPreviousValuesPromise>() => T;
}

export interface WorkOrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkOrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkOrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkOrderPreviousValuesSubscription>() => T;
}

export interface WorkOrderPreviousValues {
  id: ID_Output;
  item: String;
  status: WorkOrderStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WorkOrderPreviousValuesPromise
  extends Promise<WorkOrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  item: () => Promise<String>;
  status: () => Promise<WorkOrderStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkOrderPreviousValuesSubscription
  extends Promise<AsyncIterator<WorkOrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  item: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<WorkOrderStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WorkTypeSubscriptionPayload {
  mutation: MutationType;
  node: WorkType;
  updatedFields: String[];
  previousValues: WorkTypePreviousValues;
}

export interface WorkTypeSubscriptionPayloadPromise
  extends Promise<WorkTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkTypePreviousValuesPromise>() => T;
}

export interface WorkTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkTypePreviousValuesSubscription>() => T;
}

export interface WorkTypePreviousValues {
  id: ID_Output;
  name: String;
  rate: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WorkTypePreviousValuesPromise
  extends Promise<WorkTypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  rate: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkTypePreviousValuesSubscription
  extends Promise<AsyncIterator<WorkTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  rate: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Client",
    embedded: false
  },
  {
    name: "WorkType",
    embedded: false
  },
  {
    name: "WorkOrder",
    embedded: false
  },
  {
    name: "WorkOrderStatus",
    embedded: false
  },
  {
    name: "WorkBreakdown",
    embedded: false
  },
  {
    name: "WorkBreakdownStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
