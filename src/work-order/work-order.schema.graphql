type WorkOrder {
  id: ID!
  item: String!
  workTypes: [WorkType]!
  worker: User
  client: Client!
  workBreakdowns: [WorkBreakdown!]!
  status: WorkOrderStatus!
  createdAt: String!
  updatedAt: String!
}

enum WorkOrderStatus {
  PENDING
  IN_PROGRESS
  HALF_DONE
  COMPLETE
}

input WorkOrderInput {
  item: String!
  workTypeIds: [ID!]!
  workBreakdowns: [NestedWorkBreakdownInput]
  workerId: ID
  clientId: ID!
}

input NestedWorkBreakdownInput {
  id: ID
  sideA: String
  sideB: String
  quantity: Int
  ups: Int
  side: Int
  rate: Float
}

type Query {
  getWorkOrders: [WorkOrder!]!
  getWorkOrderById: WorkOrder
}

type Mutation {
  createWorkOrder(input: WorkOrderInput): WorkOrder!
  updateWorkOrder(id: ID!, input: WorkOrderInput): WorkOrder!
  deleteWorkOrder(id: ID!): WorkOrder!
}
